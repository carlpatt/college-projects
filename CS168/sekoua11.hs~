{-# LANGUAGE OverloadedStrings #-}

import Data.Monoid ((<>))
import Network.HTTP.Types.Status
import Network.HTTP.Types.Header
import Network.Wai as Wai
import System.Random (randomIO)
import Text.Blaze.Html.Renderer.Utf8 (renderHtml)
import Text.Blaze.Html5 as H hiding (main)
import Text.Blaze.Html5.Attributes as A
import qualified Data.ByteString.Char8 as BS
import qualified Data.Text as T
import qualified Network.Wai.Handler.Warp as Warp

myPg :: Html
myPg = docTypeHtml $ do
  h1 "My HomePage"
  p $ do
    "Hello world welcome to the page" 
  p $ do
    "You may click on the link below to learn more about me"
  p $ do
    a ! href "/about" $ "About me"

aboutPg :: Html
aboutPg = docTypeHtml $ do
  h1 "All about me"
  p $ do
    "What makes me insterestering ? hmmm " 
  p $ do
    "I enjoy working on my body in order to stay in shape; I regularly workout, play soccer and also swim "
  p $ do
    a ! href "/ " $ "CLICK HERE to go back to HomePage"

errorPg :: Html
errorPg = docTypeHtml $ do 
  h1 "Page notFound404"
  p $ do
    "Ahhhhhhhhhhhhhh! This page doesn't exist"
  p $ do 
    a ! href "/" $ "CLICK HERE to go back to HomePage"

app :: Wai.Application
app req respond = 
 case fmap T.unpack (Wai.pathInfo req) of 
    [] -> do 
        respond $ responseLBS ok200 [("Content-Type","text/html")]
         $ renderHtml $ myPg 
    ["About"] -> do
        respond $ responseLBS ok200 [("Content-Type","text/html")]
         $ renderHtml $ aboutPg
        
    _ -> do
        respond $ responseLBS status404 [("Content-Type","text/html")]
          $ renderHtml $ errorPg

    
startServer :: IO ()
startServer = do
  putStrLn "Listening..."
  Warp.runEnv 3000 app

main :: IO ()
main = startServer

